// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MyPacket.proto

#ifndef PROTOBUF_MyPacket_2eproto__INCLUDED
#define PROTOBUF_MyPacket_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
// @@protoc_insertion_point(includes)

namespace MyPacket {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_MyPacket_2eproto();
void protobuf_AssignDesc_MyPacket_2eproto();
void protobuf_ShutdownFile_MyPacket_2eproto();

class SendingKeySet;
class CryptRequest;
class CryptResult;
class LoginRequest;
class Position;
class LoginResult;
class ChatRequest;
class ChatResult;
class MoveRequest;
class MoveResult;

enum MessageType {
  PKT_CS_LOGIN = 1,
  PKT_SC_LOGIN = 2,
  PKT_CS_CHAT = 3,
  PKT_SC_CHAT = 4,
  PKT_CS_MOVE = 5,
  PKT_SC_MOVE = 6,
  PKT_CS_CRYPT = 7,
  PKT_SC_CRYPT = 8
};
bool MessageType_IsValid(int value);
const MessageType MessageType_MIN = PKT_CS_LOGIN;
const MessageType MessageType_MAX = PKT_SC_CRYPT;
const int MessageType_ARRAYSIZE = MessageType_MAX + 1;

// ===================================================================

class SendingKeySet : public ::google::protobuf::MessageLite {
 public:
  SendingKeySet();
  virtual ~SendingKeySet();

  SendingKeySet(const SendingKeySet& from);

  inline SendingKeySet& operator=(const SendingKeySet& from) {
    CopyFrom(from);
    return *this;
  }

  static const SendingKeySet& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const SendingKeySet* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(SendingKeySet* other);

  // implements Message ----------------------------------------------

  SendingKeySet* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const SendingKeySet& from);
  void MergeFrom(const SendingKeySet& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required fixed32 DataLen = 1;
  inline bool has_datalen() const;
  inline void clear_datalen();
  static const int kDataLenFieldNumber = 1;
  inline ::google::protobuf::uint32 datalen() const;
  inline void set_datalen(::google::protobuf::uint32 value);

  // required fixed64 KeyBlob = 2;
  inline bool has_keyblob() const;
  inline void clear_keyblob();
  static const int kKeyBlobFieldNumber = 2;
  inline ::google::protobuf::uint64 keyblob() const;
  inline void set_keyblob(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:MyPacket.SendingKeySet)
 private:
  inline void set_has_datalen();
  inline void clear_has_datalen();
  inline void set_has_keyblob();
  inline void clear_has_keyblob();

  ::google::protobuf::uint64 keyblob_;
  ::google::protobuf::uint32 datalen_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_MyPacket_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_MyPacket_2eproto();
  #endif
  friend void protobuf_AssignDesc_MyPacket_2eproto();
  friend void protobuf_ShutdownFile_MyPacket_2eproto();

  void InitAsDefaultInstance();
  static SendingKeySet* default_instance_;
};
// -------------------------------------------------------------------

class CryptRequest : public ::google::protobuf::MessageLite {
 public:
  CryptRequest();
  virtual ~CryptRequest();

  CryptRequest(const CryptRequest& from);

  inline CryptRequest& operator=(const CryptRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const CryptRequest& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const CryptRequest* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(CryptRequest* other);

  // implements Message ----------------------------------------------

  CryptRequest* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const CryptRequest& from);
  void MergeFrom(const CryptRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .MyPacket.SendingKeySet SendKey = 1;
  inline bool has_sendkey() const;
  inline void clear_sendkey();
  static const int kSendKeyFieldNumber = 1;
  inline const ::MyPacket::SendingKeySet& sendkey() const;
  inline ::MyPacket::SendingKeySet* mutable_sendkey();
  inline ::MyPacket::SendingKeySet* release_sendkey();
  inline void set_allocated_sendkey(::MyPacket::SendingKeySet* sendkey);

  // @@protoc_insertion_point(class_scope:MyPacket.CryptRequest)
 private:
  inline void set_has_sendkey();
  inline void clear_has_sendkey();

  ::MyPacket::SendingKeySet* sendkey_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_MyPacket_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_MyPacket_2eproto();
  #endif
  friend void protobuf_AssignDesc_MyPacket_2eproto();
  friend void protobuf_ShutdownFile_MyPacket_2eproto();

  void InitAsDefaultInstance();
  static CryptRequest* default_instance_;
};
// -------------------------------------------------------------------

class CryptResult : public ::google::protobuf::MessageLite {
 public:
  CryptResult();
  virtual ~CryptResult();

  CryptResult(const CryptResult& from);

  inline CryptResult& operator=(const CryptResult& from) {
    CopyFrom(from);
    return *this;
  }

  static const CryptResult& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const CryptResult* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(CryptResult* other);

  // implements Message ----------------------------------------------

  CryptResult* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const CryptResult& from);
  void MergeFrom(const CryptResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .MyPacket.SendingKeySet SendKey = 1;
  inline bool has_sendkey() const;
  inline void clear_sendkey();
  static const int kSendKeyFieldNumber = 1;
  inline const ::MyPacket::SendingKeySet& sendkey() const;
  inline ::MyPacket::SendingKeySet* mutable_sendkey();
  inline ::MyPacket::SendingKeySet* release_sendkey();
  inline void set_allocated_sendkey(::MyPacket::SendingKeySet* sendkey);

  // @@protoc_insertion_point(class_scope:MyPacket.CryptResult)
 private:
  inline void set_has_sendkey();
  inline void clear_has_sendkey();

  ::MyPacket::SendingKeySet* sendkey_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_MyPacket_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_MyPacket_2eproto();
  #endif
  friend void protobuf_AssignDesc_MyPacket_2eproto();
  friend void protobuf_ShutdownFile_MyPacket_2eproto();

  void InitAsDefaultInstance();
  static CryptResult* default_instance_;
};
// -------------------------------------------------------------------

class LoginRequest : public ::google::protobuf::MessageLite {
 public:
  LoginRequest();
  virtual ~LoginRequest();

  LoginRequest(const LoginRequest& from);

  inline LoginRequest& operator=(const LoginRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const LoginRequest& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const LoginRequest* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(LoginRequest* other);

  // implements Message ----------------------------------------------

  LoginRequest* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const LoginRequest& from);
  void MergeFrom(const LoginRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 PlayerId = 1;
  inline bool has_playerid() const;
  inline void clear_playerid();
  static const int kPlayerIdFieldNumber = 1;
  inline ::google::protobuf::int32 playerid() const;
  inline void set_playerid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:MyPacket.LoginRequest)
 private:
  inline void set_has_playerid();
  inline void clear_has_playerid();

  ::google::protobuf::int32 playerid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_MyPacket_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_MyPacket_2eproto();
  #endif
  friend void protobuf_AssignDesc_MyPacket_2eproto();
  friend void protobuf_ShutdownFile_MyPacket_2eproto();

  void InitAsDefaultInstance();
  static LoginRequest* default_instance_;
};
// -------------------------------------------------------------------

class Position : public ::google::protobuf::MessageLite {
 public:
  Position();
  virtual ~Position();

  Position(const Position& from);

  inline Position& operator=(const Position& from) {
    CopyFrom(from);
    return *this;
  }

  static const Position& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const Position* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(Position* other);

  // implements Message ----------------------------------------------

  Position* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const Position& from);
  void MergeFrom(const Position& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required float x = 1;
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 1;
  inline float x() const;
  inline void set_x(float value);

  // required float y = 2;
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 2;
  inline float y() const;
  inline void set_y(float value);

  // required float z = 3;
  inline bool has_z() const;
  inline void clear_z();
  static const int kZFieldNumber = 3;
  inline float z() const;
  inline void set_z(float value);

  // @@protoc_insertion_point(class_scope:MyPacket.Position)
 private:
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();
  inline void set_has_z();
  inline void clear_has_z();

  float x_;
  float y_;
  float z_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_MyPacket_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_MyPacket_2eproto();
  #endif
  friend void protobuf_AssignDesc_MyPacket_2eproto();
  friend void protobuf_ShutdownFile_MyPacket_2eproto();

  void InitAsDefaultInstance();
  static Position* default_instance_;
};
// -------------------------------------------------------------------

class LoginResult : public ::google::protobuf::MessageLite {
 public:
  LoginResult();
  virtual ~LoginResult();

  LoginResult(const LoginResult& from);

  inline LoginResult& operator=(const LoginResult& from) {
    CopyFrom(from);
    return *this;
  }

  static const LoginResult& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const LoginResult* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(LoginResult* other);

  // implements Message ----------------------------------------------

  LoginResult* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const LoginResult& from);
  void MergeFrom(const LoginResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 PlayerId = 1;
  inline bool has_playerid() const;
  inline void clear_playerid();
  static const int kPlayerIdFieldNumber = 1;
  inline ::google::protobuf::int32 playerid() const;
  inline void set_playerid(::google::protobuf::int32 value);

  // required string PlayerName = 2;
  inline bool has_playername() const;
  inline void clear_playername();
  static const int kPlayerNameFieldNumber = 2;
  inline const ::std::string& playername() const;
  inline void set_playername(const ::std::string& value);
  inline void set_playername(const char* value);
  inline void set_playername(const char* value, size_t size);
  inline ::std::string* mutable_playername();
  inline ::std::string* release_playername();
  inline void set_allocated_playername(::std::string* playername);

  // required .MyPacket.Position PlayerPos = 3;
  inline bool has_playerpos() const;
  inline void clear_playerpos();
  static const int kPlayerPosFieldNumber = 3;
  inline const ::MyPacket::Position& playerpos() const;
  inline ::MyPacket::Position* mutable_playerpos();
  inline ::MyPacket::Position* release_playerpos();
  inline void set_allocated_playerpos(::MyPacket::Position* playerpos);

  // @@protoc_insertion_point(class_scope:MyPacket.LoginResult)
 private:
  inline void set_has_playerid();
  inline void clear_has_playerid();
  inline void set_has_playername();
  inline void clear_has_playername();
  inline void set_has_playerpos();
  inline void clear_has_playerpos();

  ::std::string* playername_;
  ::MyPacket::Position* playerpos_;
  ::google::protobuf::int32 playerid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_MyPacket_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_MyPacket_2eproto();
  #endif
  friend void protobuf_AssignDesc_MyPacket_2eproto();
  friend void protobuf_ShutdownFile_MyPacket_2eproto();

  void InitAsDefaultInstance();
  static LoginResult* default_instance_;
};
// -------------------------------------------------------------------

class ChatRequest : public ::google::protobuf::MessageLite {
 public:
  ChatRequest();
  virtual ~ChatRequest();

  ChatRequest(const ChatRequest& from);

  inline ChatRequest& operator=(const ChatRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ChatRequest& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const ChatRequest* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(ChatRequest* other);

  // implements Message ----------------------------------------------

  ChatRequest* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const ChatRequest& from);
  void MergeFrom(const ChatRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 PlayerId = 1;
  inline bool has_playerid() const;
  inline void clear_playerid();
  static const int kPlayerIdFieldNumber = 1;
  inline ::google::protobuf::int32 playerid() const;
  inline void set_playerid(::google::protobuf::int32 value);

  // required string PlayerMessage = 2;
  inline bool has_playermessage() const;
  inline void clear_playermessage();
  static const int kPlayerMessageFieldNumber = 2;
  inline const ::std::string& playermessage() const;
  inline void set_playermessage(const ::std::string& value);
  inline void set_playermessage(const char* value);
  inline void set_playermessage(const char* value, size_t size);
  inline ::std::string* mutable_playermessage();
  inline ::std::string* release_playermessage();
  inline void set_allocated_playermessage(::std::string* playermessage);

  // @@protoc_insertion_point(class_scope:MyPacket.ChatRequest)
 private:
  inline void set_has_playerid();
  inline void clear_has_playerid();
  inline void set_has_playermessage();
  inline void clear_has_playermessage();

  ::std::string* playermessage_;
  ::google::protobuf::int32 playerid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_MyPacket_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_MyPacket_2eproto();
  #endif
  friend void protobuf_AssignDesc_MyPacket_2eproto();
  friend void protobuf_ShutdownFile_MyPacket_2eproto();

  void InitAsDefaultInstance();
  static ChatRequest* default_instance_;
};
// -------------------------------------------------------------------

class ChatResult : public ::google::protobuf::MessageLite {
 public:
  ChatResult();
  virtual ~ChatResult();

  ChatResult(const ChatResult& from);

  inline ChatResult& operator=(const ChatResult& from) {
    CopyFrom(from);
    return *this;
  }

  static const ChatResult& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const ChatResult* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(ChatResult* other);

  // implements Message ----------------------------------------------

  ChatResult* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const ChatResult& from);
  void MergeFrom(const ChatResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string PlayerName = 1;
  inline bool has_playername() const;
  inline void clear_playername();
  static const int kPlayerNameFieldNumber = 1;
  inline const ::std::string& playername() const;
  inline void set_playername(const ::std::string& value);
  inline void set_playername(const char* value);
  inline void set_playername(const char* value, size_t size);
  inline ::std::string* mutable_playername();
  inline ::std::string* release_playername();
  inline void set_allocated_playername(::std::string* playername);

  // required string PlayerMessage = 2;
  inline bool has_playermessage() const;
  inline void clear_playermessage();
  static const int kPlayerMessageFieldNumber = 2;
  inline const ::std::string& playermessage() const;
  inline void set_playermessage(const ::std::string& value);
  inline void set_playermessage(const char* value);
  inline void set_playermessage(const char* value, size_t size);
  inline ::std::string* mutable_playermessage();
  inline ::std::string* release_playermessage();
  inline void set_allocated_playermessage(::std::string* playermessage);

  // @@protoc_insertion_point(class_scope:MyPacket.ChatResult)
 private:
  inline void set_has_playername();
  inline void clear_has_playername();
  inline void set_has_playermessage();
  inline void clear_has_playermessage();

  ::std::string* playername_;
  ::std::string* playermessage_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_MyPacket_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_MyPacket_2eproto();
  #endif
  friend void protobuf_AssignDesc_MyPacket_2eproto();
  friend void protobuf_ShutdownFile_MyPacket_2eproto();

  void InitAsDefaultInstance();
  static ChatResult* default_instance_;
};
// -------------------------------------------------------------------

class MoveRequest : public ::google::protobuf::MessageLite {
 public:
  MoveRequest();
  virtual ~MoveRequest();

  MoveRequest(const MoveRequest& from);

  inline MoveRequest& operator=(const MoveRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const MoveRequest& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const MoveRequest* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(MoveRequest* other);

  // implements Message ----------------------------------------------

  MoveRequest* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const MoveRequest& from);
  void MergeFrom(const MoveRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 PlayerId = 1;
  inline bool has_playerid() const;
  inline void clear_playerid();
  static const int kPlayerIdFieldNumber = 1;
  inline ::google::protobuf::int32 playerid() const;
  inline void set_playerid(::google::protobuf::int32 value);

  // required .MyPacket.Position PlayerPos = 2;
  inline bool has_playerpos() const;
  inline void clear_playerpos();
  static const int kPlayerPosFieldNumber = 2;
  inline const ::MyPacket::Position& playerpos() const;
  inline ::MyPacket::Position* mutable_playerpos();
  inline ::MyPacket::Position* release_playerpos();
  inline void set_allocated_playerpos(::MyPacket::Position* playerpos);

  // @@protoc_insertion_point(class_scope:MyPacket.MoveRequest)
 private:
  inline void set_has_playerid();
  inline void clear_has_playerid();
  inline void set_has_playerpos();
  inline void clear_has_playerpos();

  ::MyPacket::Position* playerpos_;
  ::google::protobuf::int32 playerid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_MyPacket_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_MyPacket_2eproto();
  #endif
  friend void protobuf_AssignDesc_MyPacket_2eproto();
  friend void protobuf_ShutdownFile_MyPacket_2eproto();

  void InitAsDefaultInstance();
  static MoveRequest* default_instance_;
};
// -------------------------------------------------------------------

class MoveResult : public ::google::protobuf::MessageLite {
 public:
  MoveResult();
  virtual ~MoveResult();

  MoveResult(const MoveResult& from);

  inline MoveResult& operator=(const MoveResult& from) {
    CopyFrom(from);
    return *this;
  }

  static const MoveResult& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const MoveResult* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(MoveResult* other);

  // implements Message ----------------------------------------------

  MoveResult* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const MoveResult& from);
  void MergeFrom(const MoveResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 PlayerId = 1;
  inline bool has_playerid() const;
  inline void clear_playerid();
  static const int kPlayerIdFieldNumber = 1;
  inline ::google::protobuf::int32 playerid() const;
  inline void set_playerid(::google::protobuf::int32 value);

  // required .MyPacket.Position PlayerPos = 2;
  inline bool has_playerpos() const;
  inline void clear_playerpos();
  static const int kPlayerPosFieldNumber = 2;
  inline const ::MyPacket::Position& playerpos() const;
  inline ::MyPacket::Position* mutable_playerpos();
  inline ::MyPacket::Position* release_playerpos();
  inline void set_allocated_playerpos(::MyPacket::Position* playerpos);

  // @@protoc_insertion_point(class_scope:MyPacket.MoveResult)
 private:
  inline void set_has_playerid();
  inline void clear_has_playerid();
  inline void set_has_playerpos();
  inline void clear_has_playerpos();

  ::MyPacket::Position* playerpos_;
  ::google::protobuf::int32 playerid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_MyPacket_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_MyPacket_2eproto();
  #endif
  friend void protobuf_AssignDesc_MyPacket_2eproto();
  friend void protobuf_ShutdownFile_MyPacket_2eproto();

  void InitAsDefaultInstance();
  static MoveResult* default_instance_;
};
// ===================================================================


// ===================================================================

// SendingKeySet

// required fixed32 DataLen = 1;
inline bool SendingKeySet::has_datalen() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SendingKeySet::set_has_datalen() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SendingKeySet::clear_has_datalen() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SendingKeySet::clear_datalen() {
  datalen_ = 0u;
  clear_has_datalen();
}
inline ::google::protobuf::uint32 SendingKeySet::datalen() const {
  return datalen_;
}
inline void SendingKeySet::set_datalen(::google::protobuf::uint32 value) {
  set_has_datalen();
  datalen_ = value;
}

// required fixed64 KeyBlob = 2;
inline bool SendingKeySet::has_keyblob() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SendingKeySet::set_has_keyblob() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SendingKeySet::clear_has_keyblob() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SendingKeySet::clear_keyblob() {
  keyblob_ = GOOGLE_ULONGLONG(0);
  clear_has_keyblob();
}
inline ::google::protobuf::uint64 SendingKeySet::keyblob() const {
  return keyblob_;
}
inline void SendingKeySet::set_keyblob(::google::protobuf::uint64 value) {
  set_has_keyblob();
  keyblob_ = value;
}

// -------------------------------------------------------------------

// CryptRequest

// required .MyPacket.SendingKeySet SendKey = 1;
inline bool CryptRequest::has_sendkey() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CryptRequest::set_has_sendkey() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CryptRequest::clear_has_sendkey() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CryptRequest::clear_sendkey() {
  if (sendkey_ != NULL) sendkey_->::MyPacket::SendingKeySet::Clear();
  clear_has_sendkey();
}
inline const ::MyPacket::SendingKeySet& CryptRequest::sendkey() const {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return sendkey_ != NULL ? *sendkey_ : *default_instance().sendkey_;
#else
  return sendkey_ != NULL ? *sendkey_ : *default_instance_->sendkey_;
#endif
}
inline ::MyPacket::SendingKeySet* CryptRequest::mutable_sendkey() {
  set_has_sendkey();
  if (sendkey_ == NULL) sendkey_ = new ::MyPacket::SendingKeySet;
  return sendkey_;
}
inline ::MyPacket::SendingKeySet* CryptRequest::release_sendkey() {
  clear_has_sendkey();
  ::MyPacket::SendingKeySet* temp = sendkey_;
  sendkey_ = NULL;
  return temp;
}
inline void CryptRequest::set_allocated_sendkey(::MyPacket::SendingKeySet* sendkey) {
  delete sendkey_;
  sendkey_ = sendkey;
  if (sendkey) {
    set_has_sendkey();
  } else {
    clear_has_sendkey();
  }
}

// -------------------------------------------------------------------

// CryptResult

// required .MyPacket.SendingKeySet SendKey = 1;
inline bool CryptResult::has_sendkey() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CryptResult::set_has_sendkey() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CryptResult::clear_has_sendkey() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CryptResult::clear_sendkey() {
  if (sendkey_ != NULL) sendkey_->::MyPacket::SendingKeySet::Clear();
  clear_has_sendkey();
}
inline const ::MyPacket::SendingKeySet& CryptResult::sendkey() const {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return sendkey_ != NULL ? *sendkey_ : *default_instance().sendkey_;
#else
  return sendkey_ != NULL ? *sendkey_ : *default_instance_->sendkey_;
#endif
}
inline ::MyPacket::SendingKeySet* CryptResult::mutable_sendkey() {
  set_has_sendkey();
  if (sendkey_ == NULL) sendkey_ = new ::MyPacket::SendingKeySet;
  return sendkey_;
}
inline ::MyPacket::SendingKeySet* CryptResult::release_sendkey() {
  clear_has_sendkey();
  ::MyPacket::SendingKeySet* temp = sendkey_;
  sendkey_ = NULL;
  return temp;
}
inline void CryptResult::set_allocated_sendkey(::MyPacket::SendingKeySet* sendkey) {
  delete sendkey_;
  sendkey_ = sendkey;
  if (sendkey) {
    set_has_sendkey();
  } else {
    clear_has_sendkey();
  }
}

// -------------------------------------------------------------------

// LoginRequest

// required int32 PlayerId = 1;
inline bool LoginRequest::has_playerid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LoginRequest::set_has_playerid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LoginRequest::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LoginRequest::clear_playerid() {
  playerid_ = 0;
  clear_has_playerid();
}
inline ::google::protobuf::int32 LoginRequest::playerid() const {
  return playerid_;
}
inline void LoginRequest::set_playerid(::google::protobuf::int32 value) {
  set_has_playerid();
  playerid_ = value;
}

// -------------------------------------------------------------------

// Position

// required float x = 1;
inline bool Position::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Position::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Position::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Position::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline float Position::x() const {
  return x_;
}
inline void Position::set_x(float value) {
  set_has_x();
  x_ = value;
}

// required float y = 2;
inline bool Position::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Position::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Position::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Position::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline float Position::y() const {
  return y_;
}
inline void Position::set_y(float value) {
  set_has_y();
  y_ = value;
}

// required float z = 3;
inline bool Position::has_z() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Position::set_has_z() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Position::clear_has_z() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Position::clear_z() {
  z_ = 0;
  clear_has_z();
}
inline float Position::z() const {
  return z_;
}
inline void Position::set_z(float value) {
  set_has_z();
  z_ = value;
}

// -------------------------------------------------------------------

// LoginResult

// required int32 PlayerId = 1;
inline bool LoginResult::has_playerid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LoginResult::set_has_playerid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LoginResult::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LoginResult::clear_playerid() {
  playerid_ = 0;
  clear_has_playerid();
}
inline ::google::protobuf::int32 LoginResult::playerid() const {
  return playerid_;
}
inline void LoginResult::set_playerid(::google::protobuf::int32 value) {
  set_has_playerid();
  playerid_ = value;
}

// required string PlayerName = 2;
inline bool LoginResult::has_playername() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LoginResult::set_has_playername() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LoginResult::clear_has_playername() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LoginResult::clear_playername() {
  if (playername_ != &::google::protobuf::internal::kEmptyString) {
    playername_->clear();
  }
  clear_has_playername();
}
inline const ::std::string& LoginResult::playername() const {
  return *playername_;
}
inline void LoginResult::set_playername(const ::std::string& value) {
  set_has_playername();
  if (playername_ == &::google::protobuf::internal::kEmptyString) {
    playername_ = new ::std::string;
  }
  playername_->assign(value);
}
inline void LoginResult::set_playername(const char* value) {
  set_has_playername();
  if (playername_ == &::google::protobuf::internal::kEmptyString) {
    playername_ = new ::std::string;
  }
  playername_->assign(value);
}
inline void LoginResult::set_playername(const char* value, size_t size) {
  set_has_playername();
  if (playername_ == &::google::protobuf::internal::kEmptyString) {
    playername_ = new ::std::string;
  }
  playername_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LoginResult::mutable_playername() {
  set_has_playername();
  if (playername_ == &::google::protobuf::internal::kEmptyString) {
    playername_ = new ::std::string;
  }
  return playername_;
}
inline ::std::string* LoginResult::release_playername() {
  clear_has_playername();
  if (playername_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = playername_;
    playername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void LoginResult::set_allocated_playername(::std::string* playername) {
  if (playername_ != &::google::protobuf::internal::kEmptyString) {
    delete playername_;
  }
  if (playername) {
    set_has_playername();
    playername_ = playername;
  } else {
    clear_has_playername();
    playername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required .MyPacket.Position PlayerPos = 3;
inline bool LoginResult::has_playerpos() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LoginResult::set_has_playerpos() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LoginResult::clear_has_playerpos() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LoginResult::clear_playerpos() {
  if (playerpos_ != NULL) playerpos_->::MyPacket::Position::Clear();
  clear_has_playerpos();
}
inline const ::MyPacket::Position& LoginResult::playerpos() const {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return playerpos_ != NULL ? *playerpos_ : *default_instance().playerpos_;
#else
  return playerpos_ != NULL ? *playerpos_ : *default_instance_->playerpos_;
#endif
}
inline ::MyPacket::Position* LoginResult::mutable_playerpos() {
  set_has_playerpos();
  if (playerpos_ == NULL) playerpos_ = new ::MyPacket::Position;
  return playerpos_;
}
inline ::MyPacket::Position* LoginResult::release_playerpos() {
  clear_has_playerpos();
  ::MyPacket::Position* temp = playerpos_;
  playerpos_ = NULL;
  return temp;
}
inline void LoginResult::set_allocated_playerpos(::MyPacket::Position* playerpos) {
  delete playerpos_;
  playerpos_ = playerpos;
  if (playerpos) {
    set_has_playerpos();
  } else {
    clear_has_playerpos();
  }
}

// -------------------------------------------------------------------

// ChatRequest

// required int32 PlayerId = 1;
inline bool ChatRequest::has_playerid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ChatRequest::set_has_playerid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ChatRequest::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ChatRequest::clear_playerid() {
  playerid_ = 0;
  clear_has_playerid();
}
inline ::google::protobuf::int32 ChatRequest::playerid() const {
  return playerid_;
}
inline void ChatRequest::set_playerid(::google::protobuf::int32 value) {
  set_has_playerid();
  playerid_ = value;
}

// required string PlayerMessage = 2;
inline bool ChatRequest::has_playermessage() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ChatRequest::set_has_playermessage() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ChatRequest::clear_has_playermessage() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ChatRequest::clear_playermessage() {
  if (playermessage_ != &::google::protobuf::internal::kEmptyString) {
    playermessage_->clear();
  }
  clear_has_playermessage();
}
inline const ::std::string& ChatRequest::playermessage() const {
  return *playermessage_;
}
inline void ChatRequest::set_playermessage(const ::std::string& value) {
  set_has_playermessage();
  if (playermessage_ == &::google::protobuf::internal::kEmptyString) {
    playermessage_ = new ::std::string;
  }
  playermessage_->assign(value);
}
inline void ChatRequest::set_playermessage(const char* value) {
  set_has_playermessage();
  if (playermessage_ == &::google::protobuf::internal::kEmptyString) {
    playermessage_ = new ::std::string;
  }
  playermessage_->assign(value);
}
inline void ChatRequest::set_playermessage(const char* value, size_t size) {
  set_has_playermessage();
  if (playermessage_ == &::google::protobuf::internal::kEmptyString) {
    playermessage_ = new ::std::string;
  }
  playermessage_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ChatRequest::mutable_playermessage() {
  set_has_playermessage();
  if (playermessage_ == &::google::protobuf::internal::kEmptyString) {
    playermessage_ = new ::std::string;
  }
  return playermessage_;
}
inline ::std::string* ChatRequest::release_playermessage() {
  clear_has_playermessage();
  if (playermessage_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = playermessage_;
    playermessage_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ChatRequest::set_allocated_playermessage(::std::string* playermessage) {
  if (playermessage_ != &::google::protobuf::internal::kEmptyString) {
    delete playermessage_;
  }
  if (playermessage) {
    set_has_playermessage();
    playermessage_ = playermessage;
  } else {
    clear_has_playermessage();
    playermessage_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// ChatResult

// required string PlayerName = 1;
inline bool ChatResult::has_playername() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ChatResult::set_has_playername() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ChatResult::clear_has_playername() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ChatResult::clear_playername() {
  if (playername_ != &::google::protobuf::internal::kEmptyString) {
    playername_->clear();
  }
  clear_has_playername();
}
inline const ::std::string& ChatResult::playername() const {
  return *playername_;
}
inline void ChatResult::set_playername(const ::std::string& value) {
  set_has_playername();
  if (playername_ == &::google::protobuf::internal::kEmptyString) {
    playername_ = new ::std::string;
  }
  playername_->assign(value);
}
inline void ChatResult::set_playername(const char* value) {
  set_has_playername();
  if (playername_ == &::google::protobuf::internal::kEmptyString) {
    playername_ = new ::std::string;
  }
  playername_->assign(value);
}
inline void ChatResult::set_playername(const char* value, size_t size) {
  set_has_playername();
  if (playername_ == &::google::protobuf::internal::kEmptyString) {
    playername_ = new ::std::string;
  }
  playername_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ChatResult::mutable_playername() {
  set_has_playername();
  if (playername_ == &::google::protobuf::internal::kEmptyString) {
    playername_ = new ::std::string;
  }
  return playername_;
}
inline ::std::string* ChatResult::release_playername() {
  clear_has_playername();
  if (playername_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = playername_;
    playername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ChatResult::set_allocated_playername(::std::string* playername) {
  if (playername_ != &::google::protobuf::internal::kEmptyString) {
    delete playername_;
  }
  if (playername) {
    set_has_playername();
    playername_ = playername;
  } else {
    clear_has_playername();
    playername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string PlayerMessage = 2;
inline bool ChatResult::has_playermessage() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ChatResult::set_has_playermessage() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ChatResult::clear_has_playermessage() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ChatResult::clear_playermessage() {
  if (playermessage_ != &::google::protobuf::internal::kEmptyString) {
    playermessage_->clear();
  }
  clear_has_playermessage();
}
inline const ::std::string& ChatResult::playermessage() const {
  return *playermessage_;
}
inline void ChatResult::set_playermessage(const ::std::string& value) {
  set_has_playermessage();
  if (playermessage_ == &::google::protobuf::internal::kEmptyString) {
    playermessage_ = new ::std::string;
  }
  playermessage_->assign(value);
}
inline void ChatResult::set_playermessage(const char* value) {
  set_has_playermessage();
  if (playermessage_ == &::google::protobuf::internal::kEmptyString) {
    playermessage_ = new ::std::string;
  }
  playermessage_->assign(value);
}
inline void ChatResult::set_playermessage(const char* value, size_t size) {
  set_has_playermessage();
  if (playermessage_ == &::google::protobuf::internal::kEmptyString) {
    playermessage_ = new ::std::string;
  }
  playermessage_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ChatResult::mutable_playermessage() {
  set_has_playermessage();
  if (playermessage_ == &::google::protobuf::internal::kEmptyString) {
    playermessage_ = new ::std::string;
  }
  return playermessage_;
}
inline ::std::string* ChatResult::release_playermessage() {
  clear_has_playermessage();
  if (playermessage_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = playermessage_;
    playermessage_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ChatResult::set_allocated_playermessage(::std::string* playermessage) {
  if (playermessage_ != &::google::protobuf::internal::kEmptyString) {
    delete playermessage_;
  }
  if (playermessage) {
    set_has_playermessage();
    playermessage_ = playermessage;
  } else {
    clear_has_playermessage();
    playermessage_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// MoveRequest

// required int32 PlayerId = 1;
inline bool MoveRequest::has_playerid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MoveRequest::set_has_playerid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MoveRequest::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MoveRequest::clear_playerid() {
  playerid_ = 0;
  clear_has_playerid();
}
inline ::google::protobuf::int32 MoveRequest::playerid() const {
  return playerid_;
}
inline void MoveRequest::set_playerid(::google::protobuf::int32 value) {
  set_has_playerid();
  playerid_ = value;
}

// required .MyPacket.Position PlayerPos = 2;
inline bool MoveRequest::has_playerpos() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MoveRequest::set_has_playerpos() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MoveRequest::clear_has_playerpos() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MoveRequest::clear_playerpos() {
  if (playerpos_ != NULL) playerpos_->::MyPacket::Position::Clear();
  clear_has_playerpos();
}
inline const ::MyPacket::Position& MoveRequest::playerpos() const {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return playerpos_ != NULL ? *playerpos_ : *default_instance().playerpos_;
#else
  return playerpos_ != NULL ? *playerpos_ : *default_instance_->playerpos_;
#endif
}
inline ::MyPacket::Position* MoveRequest::mutable_playerpos() {
  set_has_playerpos();
  if (playerpos_ == NULL) playerpos_ = new ::MyPacket::Position;
  return playerpos_;
}
inline ::MyPacket::Position* MoveRequest::release_playerpos() {
  clear_has_playerpos();
  ::MyPacket::Position* temp = playerpos_;
  playerpos_ = NULL;
  return temp;
}
inline void MoveRequest::set_allocated_playerpos(::MyPacket::Position* playerpos) {
  delete playerpos_;
  playerpos_ = playerpos;
  if (playerpos) {
    set_has_playerpos();
  } else {
    clear_has_playerpos();
  }
}

// -------------------------------------------------------------------

// MoveResult

// required int32 PlayerId = 1;
inline bool MoveResult::has_playerid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MoveResult::set_has_playerid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MoveResult::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MoveResult::clear_playerid() {
  playerid_ = 0;
  clear_has_playerid();
}
inline ::google::protobuf::int32 MoveResult::playerid() const {
  return playerid_;
}
inline void MoveResult::set_playerid(::google::protobuf::int32 value) {
  set_has_playerid();
  playerid_ = value;
}

// required .MyPacket.Position PlayerPos = 2;
inline bool MoveResult::has_playerpos() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MoveResult::set_has_playerpos() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MoveResult::clear_has_playerpos() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MoveResult::clear_playerpos() {
  if (playerpos_ != NULL) playerpos_->::MyPacket::Position::Clear();
  clear_has_playerpos();
}
inline const ::MyPacket::Position& MoveResult::playerpos() const {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return playerpos_ != NULL ? *playerpos_ : *default_instance().playerpos_;
#else
  return playerpos_ != NULL ? *playerpos_ : *default_instance_->playerpos_;
#endif
}
inline ::MyPacket::Position* MoveResult::mutable_playerpos() {
  set_has_playerpos();
  if (playerpos_ == NULL) playerpos_ = new ::MyPacket::Position;
  return playerpos_;
}
inline ::MyPacket::Position* MoveResult::release_playerpos() {
  clear_has_playerpos();
  ::MyPacket::Position* temp = playerpos_;
  playerpos_ = NULL;
  return temp;
}
inline void MoveResult::set_allocated_playerpos(::MyPacket::Position* playerpos) {
  delete playerpos_;
  playerpos_ = playerpos;
  if (playerpos) {
    set_has_playerpos();
  } else {
    clear_has_playerpos();
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace MyPacket

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_MyPacket_2eproto__INCLUDED
